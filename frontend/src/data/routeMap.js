// src/data/routeMap.js
export const routeMap = [
  {
    frontend: "/prompts",
    backend: "/api/prompts/",
    view: "PromptListView",
    serializer: "PromptSerializer",
    notes: "List all prompts",
  },
  {
    frontend: "/prompts/:slug",
    backend: "/api/prompts/<slug>/",
    view: "PromptDetailView",
    serializer: "PromptSerializer",
    notes: "Prompt detail by slug",
  },
  {
    frontend: "/assistants",
    backend: "/api/assistants/",
    view: "AssistantListView",
    serializer: "AssistantSerializer",
    notes: "List all assistants",
  },
  {
    frontend: "/assistants/primary",
    backend: "/api/assistants/primary/",
    view: "primary_assistant_view",
    serializer: "AssistantSerializer",
    notes: "Primary assistant dashboard",
  },
  {
    frontend: "/assistants/primary/create",
    backend: "/api/assistants/primary/create/",
    view: "create_primary_assistant",
    serializer: "AssistantSerializer",
    notes: "Create the primary assistant",
  },
  {
    frontend: "/assistants/:slug",
    backend: "/api/assistants/<slug>/",
    view: "AssistantDetailView",
    serializer: "AssistantSerializer",
    notes: "Assistant detail",
  },
  {
    frontend: "/assistants/:slug/reflect",
    // Updated to new immediate reflection endpoint
    backend: "/api/assistants/<slug>/reflect-now/",
    view: "reflect_on_assistant",

    serializer: "n/a (triggers task)",
    notes: "Trigger assistant reflection using /reflect-now/",
  },
  {
    frontend: "/assistants/:slug/delegation-trace",
    backend: "/api/assistants/<slug>/hierarchical-memory/",
    view: "hierarchical_memory",
    serializer: "MemoryEntrySerializer",
    notes: "Hierarchical memory trace",
  },
  {
    frontend: "/assistants/:slug/subagent_reflect/:id",
    backend: "/api/assistants/<slug>/subagent_reflect/<trace_id>/",
    view: "subagent_reflect",
    serializer: "AssistantReflectionLogSerializer",
    notes: "Reflect on sub-agent output",
  },
  {
    frontend: "/delegation/subagent_reflect/:id",
    backend: "/api/assistants/delegation/subagent_reflect/<trace_id>/",
    view: "subagent_reflect",
    serializer: "AssistantReflectionLogSerializer",
    notes: "Reflect on sub-agent output by event",
  },
  {
    frontend: "/assistants/:slug/reflections",
    backend: "/api/assistants/<slug>/reflections/",
    view: "assistant_reflection_logs",
    serializer: "AssistantReflectionLogSerializer",
    notes: "List reflections for an assistant",
  },
  {
    frontend: "/assistants/:slug/replay_reflections",
    backend: "/api/assistants/<slug>/replays/",
    view: "assistant_reflection_replays",
    serializer: "ReflectionReplayLogSerializer",
    notes: "List reflection replay logs",
  },
  {
    frontend: "/reflections",
    backend: "/api/mcp/reflections/",
    view: "list_reflections",
    serializer: "ReflectionLogSerializer",
    notes: "List assistant reflections",
  },
  {
    frontend: "/reflections/:id",
    backend: "/api/mcp/reflections/<uuid>/",
    view: "reflection_detail",
    serializer: "ReflectionLogSerializer",
    notes: "Reflection detail by ID",
  },
  {
    frontend: "/grouped-reflection",
    backend: "/api/mcp/dev_docs/summarize/",
    view: "summarize_and_group_devdocs_view",
    serializer: "GroupedDevDocReflectionSerializer",
    notes: "Trigger and return grouped dev doc reflection",
  },
  {
    frontend: "/grouped-reflection/:id",
    backend: "/api/mcp/dev_docs/grouped/<pk>/",
    view: "grouped_reflection_detail",
    serializer: "GroupedDevDocReflectionSerializer",
    notes: "Detail of grouped dev doc reflection",
  },
  {
    frontend: "/activity",
    backend: "n/a",
    view: "ActivityPage",
    serializer: "BeliefAlignedDeploymentStandardSerializer",
    notes: "Activity timeline",
  },
  {
    frontend: "/dashboard/world",
    backend: "/api/metrics/world-metrics/",
    view: "WorldDashboardPage",
    serializer: "WorldMetrics",
    notes: "MythOS world metrics dashboard",
  },
  {
    frontend: "/map/assistants",
    backend: "/api/metrics/assistant-presence/",
    view: "AssistantPresenceMapPage",
    serializer: "FederatedMythicIntelligenceSummonerSerializer",
    notes: "Assistant presence map",
  },
  {
    frontend: "/heatmap/mythflow",
    backend: "/api/metrics/mythflow-heatmap/",
    view: "MythflowHeatmapPage",
    serializer: "FederatedMythicIntelligenceSummonerSerializer",
    notes: "Mythflow heatmap viewer",
  },
  {
    frontend: "/assistants/:id/interface",
    backend: "/api/assistants/:id/",
    view: "assistant_interface",
    serializer: "AssistantSerializer",
    notes: "Assistant interface data",
  },
  {
    frontend: "/assistants/:id/thoughts",
    backend: "/api/assistants/:id/thought-log/",
    view: "ThoughtLogPanel",
    serializer: "AssistantThoughtSerializer",
    notes: "Chain-of-thought log",
  },
  {
    frontend: "/assistants/:id/fork",
    backend: "/api/assistants/:id/belief-forks/",
    view: "BeliefForkViewer",
    serializer: "BeliefForkSerializer",
    notes: "Belief fork visualization",
  },
  {
    frontend: "/assistants/:id/deck",
    backend: "/api/assistants/:id/personality-deck/",
    view: "PersonalityDeckBuilder",
    serializer: "AssistantPersonalityDeckSerializer",
    notes: "Personality deck editor",
  },
  {
    frontend: "/codex",
    backend: "/api/codex/",
    view: "codex_interaction",
    serializer: "-",
    notes: "Codex viewer",
  },
  {
    frontend: "/codex/converge",
    backend: "/api/codex/converge/",
    view: "codex_converge",
    serializer: "-",
    notes: "Codex merging",
  },
  {
    frontend: "/codex/proof",
    backend: "/api/codex/proof-of-symbol/",
    view: "codex_proof",
    serializer: "-",
    notes: "Codex integrity",
  },
  {
    frontend: "/codex/evolve",
    backend: "/api/codex/evolve/",
    view: "PromptMutationExplorer",
    serializer: "-",
    notes: "Codex prompt + role mutation",
  },
  {
    frontend: "/codex/orchestrator/:assistantId",
    backend: "/api/codex/orchestrator/",
    view: "CodexPromptOrchestrator",
    serializer: "-",
    notes: "Assistant prompt editor",
  },
  {
    frontend: "/codex/mutator/:clauseId",
    backend: "/api/codex/mutator/<clauseId>/",
    view: "CodexClauseMutatorPage",
    serializer: "-",
    notes: "Edit & mutate codex clause",
  },
  {
    frontend: "/ritual",
    backend: "/api/ritual/launchpads/",
    view: "RitualDashboardPage",
    serializer: "-",
    notes: "Ritual dashboard",
  },
  {
    frontend: "/ritual/composer",
    backend: "/api/ritual/compose/",
    view: "RitualComposerPage",
    serializer: "-",
    notes: "Ritual blueprint editor",
  },
  {
    frontend: "/ritual/containers",
    backend: "/api/ritual/containers/",
    view: "RitualContainerPanel",
    serializer: "-",
    notes: "Persistent ritual containers",
  },
  {
    frontend: "/ritual/fork/replay",
    backend: "/api/ritual/fork-replay/",
    view: "RitualForkReplayPage",
    serializer: "-",
    notes: "Ritual fork replay",
  },
  {
    frontend: "/timeline/memory",
    backend: "/api/memory/timeline/",
    view: "MemoryTimelineViewer",
    serializer: "-",
    notes: "Role-tagged memory braid",
  },
  {
    frontend: "/memory/sandbox/:assistantId",
    backend: "/api/memory/sandbox/<assistantId>/",
    view: "MemorySandboxPage",
    serializer: "-",
    notes: "Memory alignment sandbox",
  },
  {
    frontend: "/dream/rebirth",
    backend: "/api/dream/rebirth/",
    view: "DreamRebirthPage",
    serializer: "-",
    notes: "Dream rebirth",
  },
  {
    frontend: "/anchor/continuity",
    backend: "/api/memory/continuity-anchors/",
    view: "ContinuityAnchorPage",
    serializer: "ContinuityAnchorPointSerializer",
    notes: "Continuity anchors",
  },
  {
    frontend: "/anchor/mutations",
    backend: "/api/glossary/mutations/",
    view: "GlossaryMutationReviewPanel",
    serializer: "SymbolicMemoryAnchorSerializer",
    notes: "Glossary mutations",
  },
  {
    frontend: "/anchor/symbolic",
    backend: "/api/memory/symbolic-anchors/",
    view: "SymbolicAnchorAdminPage",
    serializer: "SymbolicMemoryAnchorSerializer",
    notes: "Symbolic anchor admin",
  },
  {
    frontend: "/anchor/symbolic/:slug",
    backend: "/api/memory/symbolic-anchors/<slug>/convergence/",
    view: "SymbolicAnchorDetailPage",
    serializer: "AnchorConvergenceLogSerializer",
    notes: "Anchor detail",
  },
  {
    frontend: "/guilds/council",
    backend: "/api/guilds/council/",
    view: "GuildArbitrationCouncilPage",
    serializer: "-",
    notes: "Arbitration council",
  },
  {
    frontend: "/treaty/forge",
    backend: "/api/treaty/forge/",
    view: "TreatyEditorPage",
    serializer: "SymbolicTreatyProtocolSerializer",
    notes: "Treaty builder",
  },
  {
    frontend: "/federation/codices",
    backend: "/api/federation/codices/",
    view: "CodexFederationPage",
    serializer: "CodexFederationArchitectureSerializer",
    notes: "Federated codex cluster viewer",
  },
  {
    frontend: "/law/ritual",
    backend: "/api/law/ritual/",
    view: "RitualLawPage",
    serializer: "-",
    notes: "Ritual law",
  },
  {
    frontend: "/replay/engine",
    backend: "/api/replay/engine/",
    view: "SymbolicReplayEnginePage",
    serializer: "-",
    notes: "Replay engine",
  },
  {
    frontend: "/fault/injector",
    backend: "/api/fault/injector/",
    view: "FaultInjectorPage",
    serializer: "-",
    notes: "Fault injection engine",
  },
  {
    frontend: "/deploy/standards",
    backend: "/api/deploy/standards/",
    view: "DeploymentStandardsPage",
    serializer: "BeliefAlignedDeploymentStandardSerializer",
    notes: "Environment evaluator",
  },
  {
    frontend: "/summon/federated",
    backend: "/api/summon/federated/",
    view: "FederatedSummonPage",
    serializer: "FederatedMythicIntelligenceSummonerSerializer",
    notes: "Federated summoner",
  },
  {
    frontend: "/project/composer",
    backend: "/api/project/composer/",
    view: "MythOSProjectComposerPage",
    serializer: "AssistantProjectSerializer",
    notes: "Task milestone planner",
  },
  {
    frontend: "/debug/prompts",
    backend: "/api/images/debug/prompts/",
    view: "PromptDebuggerPage",
    serializer: "PromptMutationLogSerializer",
    notes: "Prompt diff + codex trace map",
  },
  {
    frontend: "/plan/graph",
    backend: "/api/plan/graph/",
    view: "PlanningGraphPage",
    serializer: "PlanningGraphNodeSerializer",
    notes: "Multi-agent planning graph",
  },
  {
    frontend: "/plan/assign",
    backend: "/api/plan/assign/",
    view: "TaskAssignmentPage",
    serializer: "TaskAssignmentRecommendationSerializer",
    notes: "Role-adaptive task assignment",
  },
  {
    frontend: "/plan/chains",
    backend: "/api/plan/chains/",
    view: "ExecutionChainPage",
    serializer: "AssistantExecutionChainSerializer",
    notes: "Assistant handoff chain planner",
  },
  {
    frontend: "/forecast/belief",
    backend: "/api/forecast/belief/",
    view: "BeliefForecastPage",
    serializer: "BeliefForecastSnapshotSerializer",
    notes: "Belief resonance forecast heatmap",
  },
  {
    frontend: "/evolve/swarm",
    backend: "/api/metrics/evolve/swarm/",
    view: "SwarmTaskEvolutionPage",
    serializer: "TaskEvolutionSuggestionSerializer",
    notes: "Swarm task evolution dashboard",
  },
  {
    frontend: "/plan/skills/:id",
    backend: "/api/plan/skills/",
    view: "SkillPlannerPage",
    serializer: "SkillTrainingMapSerializer",
    notes: "Memory-optimized skill planner",
  },
  {
    frontend: "/feedback/prompts/:id",
    backend: "/api/feedback/prompts/",
    view: "PromptFeedbackPage",
    serializer: "PromptVersionTraceSerializer",
    notes: "Prompt feedback refinement",
  },
  {
    frontend: "/orchestration/timeline",
    backend: "/api/agents/orchestration/timeline/",
    view: "OrchestrationTimelinePage",
    serializer: "AssistantOrchestrationEventSerializer",
    notes: "Assistant orchestration timeline",
  },
  {
    frontend: "/ritual/rewire",
    backend: "/api/swarm/proposals/",
    view: "RitualRewirePage",
    serializer: "RitualRewiringProposalSerializer",
    notes: "Auto-ritual rewiring editor",
  },
  {
    frontend: "/swarm/graph",
    backend: "/api/swarm/graph/",
    view: "SwarmGraphPage",
    serializer: "SwarmGraphSnapshotSerializer",
    notes: "Swarm graph visualization",
  },
  {
    frontend: "/assistants/:slug/boot",
    backend: "/api/assistants/<slug>/boot_profile/",
    view: "AssistantBootPanel",
    serializer: "-",
    notes: "Assistant boot diagnostics",
  },
  {
    frontend: "/assistants/:slug/selftest",
    backend: "/api/assistants/<slug>/selftest/",
    view: "AssistantBootPanel",
    serializer: "-",
    notes: "Run assistant self-test",
  },
  {
    frontend: "/assistants/:slug/rag_self_test",
    backend: "/api/assistants/<slug>/rag_self_test/",
    view: "AssistantBootPanel",
    serializer: "-",
    notes: "Run assistant RAG self-test",
  },
  {
    frontend: "/assistants/:slug/diagnostics",
    backend: "/api/assistants/<slug>/rag_self_test/",
    view: "AssistantRagSelfTestPage",
    serializer: "-",
    notes: "Assistant RAG diagnostic runner",
  },
  {
    frontend: "/assistants/self_tests/run_all",
    backend: "/assistants/self_tests/run_all/",
    view: "RouteViewer",
    serializer: "-",
    notes: "Run all assistant self-tests",
  },
  {
    frontend: "/assistants/:slug/review-ingest/:doc_id",
    backend: "/api/assistants/<slug>/review-ingest/<doc_id>/",
    view: "ReviewIngestPage",
    serializer: "AssistantReflectionInsightSerializer",
    notes: "Assistant ingest review flow",
  },
];
