// src/data/routeMap.js
export const routeMap = [
  {
    frontend: "/prompts",
    backend: "/api/prompts/",
    view: "PromptListView",
    serializer: "PromptSerializer",
    notes: "List all prompts",
  },
  {
    frontend: "/prompts/:slug",
    backend: "/api/prompts/<slug>/",
    view: "PromptDetailView",
    serializer: "PromptSerializer",
    notes: "Prompt detail by slug",
  },
  {
    frontend: "/assistants",
    backend: "/api/assistants/",
    view: "AssistantListView",
    serializer: "AssistantSerializer",
    notes: "List all assistants",
  },
  {
    frontend: "/assistants/primary",
    backend: "/api/assistants/primary/",
    view: "primary_assistant_view",
    serializer: "AssistantSerializer",
    notes: "Primary assistant dashboard",
  },
  {
    frontend: "/assistants/:slug",
    backend: "/api/assistants/<slug>/",
    view: "AssistantDetailView",
    serializer: "AssistantSerializer",
    notes: "Assistant detail",
  },
  {
    frontend: "/assistants/:slug/reflect",
    // Updated to new immediate reflection endpoint
    backend: "/api/assistants/<slug>/reflect-now/",
    view: "reflect_on_assistant",

    serializer: "n/a (triggers task)",
    notes: "Trigger assistant reflection using /reflect-now/",
  },
  {
    frontend: "/assistants/:slug/delegation-trace",
    backend: "/api/assistants/<slug>/hierarchical-memory/",
    view: "hierarchical_memory",
    serializer: "MemoryEntrySerializer",
    notes: "Hierarchical memory trace",
  },
  {
    frontend: "/assistants/:slug/reflections",
    backend: "/api/assistants/<slug>/reflections/",
    view: "assistant_reflection_logs",
    serializer: "AssistantReflectionLogSerializer",
    notes: "List reflections for an assistant",
  },
  {
    frontend: "/reflections",
    backend: "/api/mcp/reflections/",
    view: "list_reflections",
    serializer: "ReflectionLogSerializer",
    notes: "List assistant reflections",
  },
  {
    frontend: "/reflections/:id",
    backend: "/api/mcp/reflections/<uuid>/",
    view: "reflection_detail",
    serializer: "ReflectionLogSerializer",
    notes: "Reflection detail by ID",
  },
  {
    frontend: "/grouped-reflection",
    backend: "/api/mcp/dev_docs/summarize/",
    view: "summarize_and_group_devdocs_view",
    serializer: "GroupedDevDocReflectionSerializer",
    notes: "Trigger and return grouped dev doc reflection",
  },
  {
    frontend: "/grouped-reflection/:id",
    backend: "/api/mcp/dev_docs/grouped/<pk>/",
    view: "grouped_reflection_detail",
    serializer: "GroupedDevDocReflectionSerializer",
    notes: "Detail of grouped dev doc reflection",
  },
  {
    frontend: "/activity",
    backend: "n/a",
    view: "ActivityPage",
    serializer: "-",
    notes: "Activity timeline",
  },
  {
    frontend: "/dashboard/world",
    backend: "/api/metrics/world-metrics/",
    view: "WorldDashboardPage",
    serializer: "WorldMetrics",
    notes: "MythOS world metrics dashboard",
  },
  {
    frontend: "/map/assistants",
    backend: "/api/metrics/assistant-presence/",
    view: "AssistantPresenceMapPage",
    serializer: "-",
    notes: "Assistant presence map",
  },
  {
    frontend: "/heatmap/mythflow",
    backend: "/api/metrics/mythflow-heatmap/",
    view: "MythflowHeatmapPage",
    serializer: "-",
    notes: "Mythflow heatmap viewer",
  },
  {
    frontend: "/assistants/:id/interface",
    backend: "/api/assistants/<id>/interface/",
    view: "assistant_interface",
    serializer: "AssistantSerializer",
    notes: "Assistant interface data",
  },
  {
    frontend: "/assistants/:slug/thoughts",
    backend: "/api/assistants/<slug>/thoughts/",
    view: "assistant_thoughts_view",
    serializer: "AssistantThoughtSerializer",
    notes: "Thought log stream",
  },
  {
    frontend: "/codex",
    backend: "/api/mythos/codex/",
    view: "codex_interaction",
    serializer: "-",
    notes: "Codex viewer",
  },
  {
    frontend: "/codex/converge",
    backend: "/api/mythos/codex/converge/",
    view: "codex_converge",
    serializer: "-",
    notes: "Codex merging",
  },
  {
    frontend: "/codex/proof",
    backend: "/api/mythos/codex/proof/",
    view: "codex_proof",
    serializer: "-",
    notes: "Codex integrity",
  },
  {
    frontend: "/ritual",
    backend: "/api/mythos/rituals/",
    view: "ritual_launchpads",
    serializer: "-",
    notes: "Ritual dashboard",
  },
  {
    frontend: "/ritual/containers",
    backend: "/api/mythos/ritual-containers/",
    view: "ritual_containers",
    serializer: "-",
    notes: "Persistent ritual containers",
  },
  {
    frontend: "/timeline",
    backend: "/api/agents/timeline/",
    view: "world_timeline",
    serializer: "-",
    notes: "Swarm timeline",
  },
  {
    frontend: "/dream/rebirth",
    backend: "/api/assistants/dream-rebirth/",
    view: "dream_rebirth",
    serializer: "-",
    notes: "Dream rebirth",
  },
  {
    frontend: "/anchor/continuity",
    backend: "/api/memory/continuity-anchors/",
    view: "continuity_anchor",
    serializer: "ContinuityAnchorPointSerializer",
    notes: "Continuity anchors",
  },
  {
    frontend: "/guilds/council",
    backend: "/api/guilds/council/",
    view: "guild_council",
    serializer: "-",
    notes: "Arbitration council",
  },
  {
    frontend: "/treaty/forge",
    backend: "/api/guilds/treaty/forge/",
    view: "treaty_forge",
    serializer: "-",
    notes: "Treaty builder",
  },
  {
    frontend: "/law/ritual",
    backend: "/api/law/ritual/",
    view: "ritual_law",
    serializer: "-",
    notes: "Ritual law",
  },
  {
    frontend: "/replay/engine",
    backend: "/api/replay/engine/",
    view: "replay_engine",
    serializer: "-",
    notes: "Replay engine",
  },
  {
    frontend: "/deploy/standards",
    backend: "/api/deploy/standards/",
    view: "deploy_standards",
    serializer: "-",
    notes: "Environment evaluator",
  },
  {
    frontend: "/summon/federated",
    backend: "/api/summon/federated/",
    view: "federated_summon",
    serializer: "-",
    notes: "Federated summoner",
  },
];
