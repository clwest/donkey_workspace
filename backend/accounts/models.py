import os
import uuid
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.conf import settings
from django.utils import timezone

from assistants.models.assistant import Assistant


class CustomUser(AbstractUser):
    """Custom user model."""

    class Meta:
        app_label = "accounts"

    name = models.CharField(max_length=150, blank=True, null=True)
    occupation = models.CharField(max_length=255, blank=True, null=True)
    goals = models.TextField(blank=True, null=True)
    hobbies = models.TextField(
        blank=True, null=True, help_text="User's hobbies as a comma-separated list"
    )
    profile_image = models.ImageField(
        upload_to="profile_images/", blank=True, null=True
    )

    public_key = models.TextField(unique=True, blank=True, null=True)

    assistant_name = models.CharField(max_length=50, default="Assistant")
    assistant_personality = models.TextField(
        default="empathetic and helpful",
        help_text="Describe the personality of your assistant (e.g., 'professional', 'friendly').",
    )
    personal_assistant = models.OneToOneField(
        Assistant,
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name="user_personal_assistant",
    )

    # Add custom fields
    bio = models.TextField(max_length=500, blank=True)
    birth_date = models.DateField(null=True, blank=True)
    avatar = models.ImageField(upload_to="avatars/", null=True, blank=True)
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.username or f"User-{self.id}"


class UserMemory(models.Model):
    """Model for storing user-specific memory data."""

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    memory_key = models.CharField(max_length=255, null=True, blank=True)
    memory_value = models.JSONField(default=dict)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        app_label = "accounts"
        verbose_name_plural = "User memories"
        ordering = ["-created_at"]

    def __str__(self):
        return f"{self.user.username} - {self.memory_key or 'No key'}"


class UserPrompts(models.Model):
    """Model for storing user-specific prompts."""

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    prompt_key = models.CharField(max_length=255, null=True, blank=True)
    prompt_text = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        app_label = "accounts"
        verbose_name_plural = "User prompts"
        ordering = ["-created_at"]

    def __str__(self):
        return f"{self.user.username} - {self.prompt_key or 'No key'}"


class UserInteractionSummary(models.Model):
    """Model to store summaries of user interactions."""

    class Meta:
        app_label = "accounts"

    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="interaction_summaries",
    )

    # Time period this summary covers
    period_start = models.DateTimeField()
    period_end = models.DateTimeField()

    # Interaction statistics
    message_count = models.IntegerField(default=0)
    average_sentiment = models.FloatField(null=True, blank=True)

    # Extracted insights
    frequent_topics = models.JSONField(
        default=list, help_text="List of topics frequently discussed"
    )
    communication_style = models.JSONField(
        default=dict, help_text="User's communication style preferences"
    )
    learning_areas = models.JSONField(
        default=list, help_text="Topics where user is seeking to learn"
    )
    response_preferences = models.JSONField(
        default=dict, help_text="User's preferences for response style"
    )

    # Assistant effectiveness
    helpful_responses = models.IntegerField(default=0)
    unhelpful_responses = models.IntegerField(default=0)

    # Summary text generated by language model
    interaction_summary = models.TextField(
        blank=True, help_text="Natural language summary of interaction patterns"
    )

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Interaction Summary for {self.user.username}: {self.period_start.date()} to {self.period_end.date()}"
