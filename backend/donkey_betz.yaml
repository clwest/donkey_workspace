openapi: 3.0.3
info:
  title: Donkey AI Assistant API
  version: 1.0.0
  description: Flexible API for managing assistants, memory, prompts, images, projects,
    and embeddings.
paths:
  /api/assistants/:
    get:
      operationId: assistants_retrieve
      description: |-
        Handles listing and creating Assistants.
        GET: Returns all assistants.
        POST: Creates a new assistant with validated data.
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: assistants_create
      description: |-
        Handles listing and creating Assistants.
        GET: Returns all assistants.
        POST: Creates a new assistant with validated data.
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/{slug}/:
    get:
      operationId: assistants_retrieve_2
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/{slug}/chat/:
    post:
      operationId: assistants_chat_create
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/{slug}/reflect/:
    post:
      operationId: assistants_reflect_create
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/{slug}/submit-thought/:
    post:
      operationId: assistants_submit_thought_create
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/{slug}/thoughts/:
    get:
      operationId: assistants_thoughts_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/create/:
    get:
      operationId: assistants_create_retrieve
      description: |-
        Handles listing and creating Assistants.
        GET: Returns all assistants.
        POST: Creates a new assistant with validated data.
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: assistants_create_create
      description: |-
        Handles listing and creating Assistants.
        GET: Returns all assistants.
        POST: Creates a new assistant with validated data.
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/demos/:
    get:
      operationId: assistants_demos_retrieve
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/messages/{uuid}/update/:
    patch:
      operationId: assistants_messages_update_partial_update
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/messages/feedback/:
    post:
      operationId: assistants_messages_feedback_create
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/objectives/{objective_id}/actions/:
    get:
      operationId: assistants_objectives_actions_retrieve
      parameters:
      - in: path
        name: objective_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: assistants_objectives_actions_create
      parameters:
      - in: path
        name: objective_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/:
    get:
      operationId: assistants_projects_retrieve
      description: |-
        Handles listing and creating Assistant Projects.
        GET: Returns all assistant projects.
        POST: Creates a new assistant project with validated data.
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: assistants_projects_create
      description: |-
        Handles listing and creating Assistant Projects.
        GET: Returns all assistant projects.
        POST: Creates a new assistant project with validated data.
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/{id}/:
    get:
      operationId: assistants_projects_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    patch:
      operationId: assistants_projects_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: assistants_projects_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '204':
          description: No response body
  /api/assistants/projects/{id}/ai_plan/:
    post:
      operationId: assistants_projects_ai_plan_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/{project_id}/generate_tasks/:
    post:
      operationId: assistants_projects_generate_tasks_create
      parameters:
      - in: path
        name: project_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/{project_id}/linked_memories/:
    get:
      operationId: assistants_projects_linked_memories_retrieve
      parameters:
      - in: path
        name: project_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/{project_id}/linked_prompts/:
    get:
      operationId: assistants_projects_linked_prompts_retrieve
      parameters:
      - in: path
        name: project_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/unlink_prompt/{link_id}/:
    delete:
      operationId: assistants_projects_unlink_prompt_destroy
      parameters:
      - in: path
        name: link_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/{project_id}/memory-chains/:
    get:
      operationId: assistants_projects_memory_chains_retrieve
      parameters:
      - in: path
        name: project_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: assistants_projects_memory_chains_create
      parameters:
      - in: path
        name: project_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/{project_id}/reflections/:
    get:
      operationId: assistants_projects_reflections_retrieve
      parameters:
      - in: path
        name: project_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: assistants_projects_reflections_create
      parameters:
      - in: path
        name: project_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/{project_id}/tasks/:
    get:
      operationId: assistants_projects_tasks_retrieve
      parameters:
      - in: path
        name: project_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: assistants_projects_tasks_create
      parameters:
      - in: path
        name: project_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/{slug}/thoughts/:
    get:
      operationId: assistants_projects_thoughts_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: assistants_projects_thoughts_create
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/{slug}/thoughts/{thought_id}/:
    patch:
      operationId: assistants_projects_thoughts_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      - in: path
        name: thought_id
        schema:
          type: integer
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/{slug}/thoughts/generate/:
    post:
      operationId: assistants_projects_thoughts_generate_create
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/{slug}/thoughts/reflect/:
    post:
      operationId: assistants_projects_thoughts_reflect_create
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/generate-mission/:
    post:
      operationId: assistants_projects_generate_mission_create
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/link_memory/:
    post:
      operationId: assistants_projects_link_memory_create
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/link_prompt/:
    post:
      operationId: assistants_projects_link_prompt_create
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/prompts/recent/:
    get:
      operationId: assistants_prompts_recent_list
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/projects/tasks/{task_id}/:
    patch:
      operationId: assistants_projects_tasks_partial_update
      parameters:
      - in: path
        name: task_id
        schema:
          type: integer
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: assistants_projects_tasks_destroy
      parameters:
      - in: path
        name: task_id
        schema:
          type: integer
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '204':
          description: No response body
  /api/assistants/sessions/detail/{session_id}/:
    get:
      operationId: assistants_sessions_detail_retrieve
      parameters:
      - in: path
        name: session_id
        schema:
          type: string
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/sessions/list/:
    get:
      operationId: assistants_sessions_list_retrieve
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/signals/:
    get:
      operationId: assistants_signals_retrieve
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/signals/{id}/:
    patch:
      operationId: assistants_signals_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/signals/create/:
    post:
      operationId: assistants_signals_create_create
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/sources/:
    get:
      operationId: assistants_sources_retrieve
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: assistants_sources_create
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/assistants/tasks/{task_id}/:
    patch:
      operationId: assistants_tasks_partial_update
      parameters:
      - in: path
        name: task_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: assistants_tasks_destroy
      parameters:
      - in: path
        name: task_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - assistants
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '204':
          description: No response body
  /api/characters/names/generate/:
    post:
      operationId: characters_names_generate_create
      description: API endpoint to generate a character name based on description,
        backstory, and traits.
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
  /api/characters/profiles/:
    get:
      operationId: characters_profiles_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCharacterProfileList'
          description: ''
    post:
      operationId: characters_profiles_create
      tags:
      - characters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CharacterProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CharacterProfileRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterProfile'
          description: ''
  /api/characters/profiles/{id}/images/:
    get:
      operationId: characters_profiles_images_retrieve
      description: |-
        Retrieve all reference images for a given character.
        Returns list of images with id, url, caption, alt_text, and style_name (None for reference images).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
  /api/characters/profiles/{id}/similar/:
    get:
      operationId: characters_profiles_similar_retrieve
      description: Return top similar characters for a given character based on stored
        embeddings.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
  /api/characters/profiles/{id}/train/:
    post:
      operationId: characters_profiles_train_create
      description: Trigger embedding training for a given character via Celery task.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
  /api/characters/profiles/{id}/train_status/:
    get:
      operationId: characters_profiles_train_status_retrieve
      description: Return the training profile for a specific character, creating
        if missing.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
  /api/characters/profiles/{slug}/:
    get:
      operationId: characters_profiles_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterProfile'
          description: ''
    put:
      operationId: characters_profiles_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - characters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CharacterProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CharacterProfileRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterProfile'
          description: ''
    patch:
      operationId: characters_profiles_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - characters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCharacterProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCharacterProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCharacterProfileRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterProfile'
          description: ''
    delete:
      operationId: characters_profiles_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '204':
          description: No response body
  /api/characters/profiles/{slug}/scene-edit/:
    post:
      operationId: characters_profiles_scene_edit_create
      description: |-
        Generate a new scene-based image for this character.
        POST data: { prompt: str, style_id: int (optional), base_image_id: int (optional) }
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - characters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CharacterProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CharacterProfileRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterProfile'
          description: ''
  /api/characters/projects/{id}/characters/:
    get:
      operationId: characters_projects_characters_list
      description: List all CharacterProfile entries associated with a given Project.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCharacterProfileList'
          description: ''
  /api/characters/reference-images/:
    get:
      operationId: characters_reference_images_list
      description: ViewSet to handle reference image uploads, including URL-based
        uploads.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCharacterReferenceImageList'
          description: ''
    post:
      operationId: characters_reference_images_create
      description: ViewSet to handle reference image uploads, including URL-based
        uploads.
      tags:
      - characters
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CharacterReferenceImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CharacterReferenceImageRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterReferenceImageRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterReferenceImage'
          description: ''
  /api/characters/reference-images/{id}/:
    get:
      operationId: characters_reference_images_retrieve
      description: ViewSet to handle reference image uploads, including URL-based
        uploads.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this character reference image.
        required: true
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterReferenceImage'
          description: ''
    put:
      operationId: characters_reference_images_update
      description: ViewSet to handle reference image uploads, including URL-based
        uploads.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this character reference image.
        required: true
      tags:
      - characters
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CharacterReferenceImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CharacterReferenceImageRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterReferenceImageRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterReferenceImage'
          description: ''
    patch:
      operationId: characters_reference_images_partial_update
      description: ViewSet to handle reference image uploads, including URL-based
        uploads.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this character reference image.
        required: true
      tags:
      - characters
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCharacterReferenceImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCharacterReferenceImageRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCharacterReferenceImageRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterReferenceImage'
          description: ''
    delete:
      operationId: characters_reference_images_destroy
      description: ViewSet to handle reference image uploads, including URL-based
        uploads.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this character reference image.
        required: true
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '204':
          description: No response body
  /api/characters/similarity/:
    post:
      operationId: characters_similarity_create
      description: |-
        Compute semantic similarity between input text and existing characters.
        Returns top 5 matches (public or owned by user).
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
  /api/characters/styles/:
    get:
      operationId: characters_styles_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCharacterStyleList'
          description: ''
    post:
      operationId: characters_styles_create
      tags:
      - characters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterStyleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CharacterStyleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CharacterStyleRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterStyle'
          description: ''
  /api/characters/styles/{id}/:
    get:
      operationId: characters_styles_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this character style.
        required: true
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterStyle'
          description: ''
    put:
      operationId: characters_styles_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this character style.
        required: true
      tags:
      - characters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterStyleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CharacterStyleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CharacterStyleRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterStyle'
          description: ''
    patch:
      operationId: characters_styles_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this character style.
        required: true
      tags:
      - characters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCharacterStyleRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCharacterStyleRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCharacterStyleRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterStyle'
          description: ''
    delete:
      operationId: characters_styles_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this character style.
        required: true
      tags:
      - characters
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '204':
          description: No response body
  /api/dj-rest-auth/login/:
    post:
      operationId: dj_rest_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/dj-rest-auth/logout/:
    post:
      operationId: dj_rest_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - dj-rest-auth
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/dj-rest-auth/password/change/:
    post:
      operationId: dj_rest_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/dj-rest-auth/password/reset/:
    post:
      operationId: dj_rest_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/dj-rest-auth/password/reset/confirm/:
    post:
      operationId: dj_rest_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/dj-rest-auth/registration/:
    post:
      operationId: dj_rest_auth_registration_create
      description: |-
        Registers a new user.

        Accepts the following POST parameters: username, email, password1, password2.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/dj-rest-auth/registration/resend-email/:
    post:
      operationId: dj_rest_auth_registration_resend_email_create
      description: |-
        Resends another email to an unverified email.

        Accepts the following POST parameter: email.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerificationRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/dj-rest-auth/registration/verify-email/:
    post:
      operationId: dj_rest_auth_registration_verify_email_create
      description: |-
        Verifies the email associated with the provided key.

        Accepts the following POST parameter: key.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/dj-rest-auth/user/:
    get:
      operationId: dj_rest_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: dj_rest_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: dj_rest_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /api/embeddings/chunk-text/:
    post:
      operationId: embeddings_chunk_text_create
      tags:
      - embeddings
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/embeddings/embed-text/:
    post:
      operationId: embeddings_embed_text_create
      tags:
      - embeddings
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/embeddings/search/:
    post:
      operationId: embeddings_search_create
      tags:
      - embeddings
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/embeddings/search-targets/:
    get:
      operationId: embeddings_search_targets_retrieve
      tags:
      - embeddings
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/embeddings/session/{session_id}/documents/:
    get:
      operationId: embeddings_session_documents_retrieve
      parameters:
      - in: path
        name: session_id
        schema:
          type: string
        required: true
      tags:
      - embeddings
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/embeddings/similar/:
    post:
      operationId: embeddings_similar_create
      tags:
      - embeddings
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/embeddings/similar-characters/:
    post:
      operationId: embeddings_similar_characters_create
      description: |-
        POST { "text": "smart brave donkey" }
        => [ { id, name, score } ... ]
      tags:
      - embeddings
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/embeddings/track-session/:
    post:
      operationId: embeddings_track_session_create
      tags:
      - embeddings
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/images/debug/prompts/:
    get:
      operationId: images_debug_prompts_retrieve
      description: |-
        Returns all PromptHelpers with their placement types (if any).
        Useful for inspecting current database values for prompt debugging/testing.
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/images/edit/:
    post:
      operationId: images_edit_create
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          description: No response body
  /api/images/gallery/:
    get:
      operationId: images_gallery_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedImageList'
          description: ''
  /api/images/gallery/{id}/:
    get:
      operationId: images_gallery_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
  /api/images/gallery/carousel/:
    get:
      operationId: images_gallery_carousel_retrieve
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
  /api/images/generate/:
    post:
      operationId: images_generate_create
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          description: No response body
  /api/images/image-projects/:
    get:
      operationId: images_image_projects_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectImageList'
          description: ''
  /api/images/image-projects/{id}/:
    get:
      operationId: images_image_projects_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this project image.
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectImage'
          description: ''
  /api/images/images/:
    get:
      operationId: images_images_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedImageList'
          description: ''
  /api/images/images/{id}/:
    get:
      operationId: images_images_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDetail'
          description: ''
  /api/images/images/{id}/narrate/:
    get:
      operationId: images_images_narrate_retrieve
      description: API view to handle TTS narration for a scene image.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
    post:
      operationId: images_images_narrate_create
      description: API view to handle TTS narration for a scene image.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
  /api/images/projects/{project_id}/gallery/:
    get:
      operationId: images_projects_gallery_list
      description: List all images associated with a given project.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: project_id
        schema:
          type: integer
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedImageList'
          description: ''
  /api/images/prompt-helpers/:
    get:
      operationId: images_prompt_helpers_list
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PromptHelper'
          description: ''
    post:
      operationId: images_prompt_helpers_create
      tags:
      - images
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptHelperRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PromptHelperRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PromptHelperRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptHelper'
          description: ''
  /api/images/prompt-helpers/{id}/:
    get:
      operationId: images_prompt_helpers_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Style Prompt Assistant.
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptHelper'
          description: ''
    put:
      operationId: images_prompt_helpers_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Style Prompt Assistant.
        required: true
      tags:
      - images
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptHelperRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PromptHelperRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PromptHelperRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptHelper'
          description: ''
    patch:
      operationId: images_prompt_helpers_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Style Prompt Assistant.
        required: true
      tags:
      - images
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPromptHelperRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPromptHelperRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPromptHelperRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptHelper'
          description: ''
    delete:
      operationId: images_prompt_helpers_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Style Prompt Assistant.
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/images/prompt-helpers/{id}/preview-version/{version_id}/:
    get:
      operationId: images_prompt_helpers_preview_version_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Style Prompt Assistant.
        required: true
      - in: path
        name: version_id
        schema:
          type: string
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptHelper'
          description: ''
  /api/images/prompt-helpers/{id}/rollback-version/{version_id}/:
    post:
      operationId: images_prompt_helpers_rollback_version_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Style Prompt Assistant.
        required: true
      - in: path
        name: version_id
        schema:
          type: string
        required: true
      tags:
      - images
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptHelperRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PromptHelperRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PromptHelperRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptHelper'
          description: ''
  /api/images/prompt-helpers/{id}/versions/:
    get:
      operationId: images_prompt_helpers_versions_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Style Prompt Assistant.
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptHelper'
          description: ''
    post:
      operationId: images_prompt_helpers_versions_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Style Prompt Assistant.
        required: true
      tags:
      - images
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptHelperRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PromptHelperRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PromptHelperRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptHelper'
          description: ''
  /api/images/prompt-helpers/similar/:
    get:
      operationId: images_prompt_helpers_similar_retrieve
      description: Retrieve top similar PromptHelpers based on semantic similarity
        to query.
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/images/status/{id}/:
    get:
      operationId: images_status_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - images
      security:
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/images/styles/:
    get:
      operationId: images_styles_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPromptHelperList'
          description: ''
  /api/images/styles/{id}/:
    get:
      operationId: images_styles_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Style Prompt Assistant.
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptHelper'
          description: ''
  /api/images/tags/:
    get:
      operationId: images_tags_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTagImageList'
          description: ''
  /api/images/tags/{id}/:
    get:
      operationId: images_tags_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag image.
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagImage'
          description: ''
  /api/images/theme-favorites/:
    get:
      operationId: images_theme_favorites_list
      description: CRUD for user favorites of themes. Users can favorite/unfavorite
        themes.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedThemeFavoriteList'
          description: ''
    post:
      operationId: images_theme_favorites_create
      description: CRUD for user favorites of themes. Users can favorite/unfavorite
        themes.
      tags:
      - images
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeFavoriteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ThemeFavoriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ThemeFavoriteRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeFavorite'
          description: ''
  /api/images/theme-favorites/{theme}/:
    get:
      operationId: images_theme_favorites_retrieve
      description: CRUD for user favorites of themes. Users can favorite/unfavorite
        themes.
      parameters:
      - in: path
        name: theme
        schema:
          type: string
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeFavorite'
          description: ''
    put:
      operationId: images_theme_favorites_update
      description: CRUD for user favorites of themes. Users can favorite/unfavorite
        themes.
      parameters:
      - in: path
        name: theme
        schema:
          type: string
        required: true
      tags:
      - images
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeFavoriteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ThemeFavoriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ThemeFavoriteRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeFavorite'
          description: ''
    patch:
      operationId: images_theme_favorites_partial_update
      description: CRUD for user favorites of themes. Users can favorite/unfavorite
        themes.
      parameters:
      - in: path
        name: theme
        schema:
          type: string
        required: true
      tags:
      - images
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedThemeFavoriteRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedThemeFavoriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedThemeFavoriteRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeFavorite'
          description: ''
    delete:
      operationId: images_theme_favorites_destroy
      description: CRUD for user favorites of themes. Users can favorite/unfavorite
        themes.
      parameters:
      - in: path
        name: theme
        schema:
          type: string
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/images/theme-helpers/:
    get:
      operationId: images_theme_helpers_list
      description: |-
        CRUD for ThemeHelper.
        GET returns public themes or themes created by the requesting user.
      parameters:
      - in: query
        name: category
        schema:
          type: string
      - in: query
        name: created_by
        schema:
          type: integer
      - in: query
        name: is_builtin
        schema:
          type: boolean
      - in: query
        name: is_featured
        schema:
          type: boolean
      - in: query
        name: is_public
        schema:
          type: boolean
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedThemeHelperList'
          description: ''
    post:
      operationId: images_theme_helpers_create
      description: |-
        CRUD for ThemeHelper.
        GET returns public themes or themes created by the requesting user.
      tags:
      - images
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ThemeHelperRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ThemeHelperRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeHelperRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeHelper'
          description: ''
  /api/images/theme-helpers/{id}/:
    get:
      operationId: images_theme_helpers_retrieve
      description: |-
        CRUD for ThemeHelper.
        GET returns public themes or themes created by the requesting user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this theme helper.
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeHelper'
          description: ''
    put:
      operationId: images_theme_helpers_update
      description: |-
        CRUD for ThemeHelper.
        GET returns public themes or themes created by the requesting user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this theme helper.
        required: true
      tags:
      - images
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ThemeHelperRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ThemeHelperRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeHelperRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeHelper'
          description: ''
    patch:
      operationId: images_theme_helpers_partial_update
      description: |-
        CRUD for ThemeHelper.
        GET returns public themes or themes created by the requesting user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this theme helper.
        required: true
      tags:
      - images
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedThemeHelperRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedThemeHelperRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedThemeHelperRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeHelper'
          description: ''
    delete:
      operationId: images_theme_helpers_destroy
      description: |-
        CRUD for ThemeHelper.
        GET returns public themes or themes created by the requesting user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this theme helper.
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/images/theme-helpers/{id}/remix/:
    post:
      operationId: images_theme_helpers_remix_create
      description: |-
        Create a duplicate (remix) of the specified theme, mark it as user-owned and private,
        and return the new theme instance.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this theme helper.
        required: true
      tags:
      - images
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ThemeHelperRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ThemeHelperRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeHelperRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeHelper'
          description: ''
  /api/images/upscale/:
    get:
      operationId: images_upscale_retrieve
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
    post:
      operationId: images_upscale_create
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          description: No response body
  /api/images/upscale/{id}/:
    get:
      operationId: images_upscale_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
  /api/images/user-images/:
    get:
      operationId: images_user_images_list
      description: Handles authenticated user image access with support for search
        and filtering.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedImageList'
          description: ''
    post:
      operationId: images_user_images_create
      description: Handles authenticated user image access with support for search
        and filtering.
      tags:
      - images
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
  /api/images/user-images/{id}/:
    get:
      operationId: images_user_images_retrieve
      description: Handles authenticated user image access with support for search
        and filtering.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    put:
      operationId: images_user_images_update
      description: Handles authenticated user image access with support for search
        and filtering.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - images
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    patch:
      operationId: images_user_images_partial_update
      description: Handles authenticated user image access with support for search
        and filtering.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - images
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedImageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedImageRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    delete:
      operationId: images_user_images_destroy
      description: Handles authenticated user image access with support for search
        and filtering.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/images/user-images/{id}/retry/:
    post:
      operationId: images_user_images_retry_create
      description: Re-queue a failed image generation request.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - images
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
  /api/images/user-images/delete-broken/:
    delete:
      operationId: images_user_images_delete_broken_destroy
      description: Deletes all images for the current user that have no output_url
        or output_urls.
      tags:
      - images
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/v1/mcp/agent/:
    get:
      operationId: mcp_agent_retrieve
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/mcp/agent/{agent_id}/reflect/:
    post:
      operationId: mcp_agent_reflect_create
      parameters:
      - in: path
        name: agent_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/mcp/agent/{slug}/:
    get:
      operationId: mcp_agent_retrieve_2
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/mcp/agent/projects/{project_id}/reflections/:
    get:
      operationId: mcp_agent_projects_reflections_retrieve
      parameters:
      - in: path
        name: project_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/mcp/memories/:
    get:
      operationId: mcp_memories_retrieve
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/mcp/prompt-usage/:
    post:
      operationId: mcp_prompt_usage_create
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/mcp/reflect/:
    post:
      operationId: mcp_reflect_create
      description: |-
        POST endpoint to trigger an AI reflection on important memories.
        Now returns a structured reflection with title, summary, and tags.
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/mcp/reflect/custom/:
    post:
      operationId: mcp_reflect_custom_create
      description: Reflect only on selected memories + optional goal
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/mcp/reflection-tags/{tag_name}/:
    get:
      operationId: mcp_reflection_tags_retrieve
      description: GET reflections that contain a specific tag.
      parameters:
      - in: path
        name: tag_name
        schema:
          type: string
        required: true
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/mcp/reflections/:
    get:
      operationId: mcp_reflections_retrieve
      description: GET endpoint to list all saved reflections.
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/mcp/reflections/{id}/expand/:
    post:
      operationId: mcp_reflections_expand_create
      description: 'POST: Expand an existing reflection intelligently.'
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/mcp/reflections/{reflection_id}/:
    get:
      operationId: mcp_reflections_retrieve_2
      parameters:
      - in: path
        name: reflection_id
        schema:
          type: integer
        required: true
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/mcp/reflections/{reflection_id}/save/:
    post:
      operationId: mcp_reflections_save_create
      parameters:
      - in: path
        name: reflection_id
        schema:
          type: integer
        required: true
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/mcp/reflections/recent/:
    get:
      operationId: mcp_reflections_recent_retrieve
      description: |-
        GET endpoint to return the 5 most recent reflections.
        Useful for dashboard previews, homepages, etc.
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/mcp/top-tags/:
    get:
      operationId: mcp_top_tags_retrieve
      description: Return the most common tags across all reflections.
      tags:
      - mcp
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/{id}/:
    get:
      operationId: memory_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    patch:
      operationId: memory_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: memory_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '204':
          description: No response body
  /api/assistants/{slug}/memories/:
    get:
      operationId: assistant_memories_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/by-tag/{slug}/:
    get:
      operationId: memory_by_tag_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/chains/{id}/:
    get:
      operationId: memory_chains_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/chains/create/:
    post:
      operationId: memory_chains_create_create
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/chains/list/:
    get:
      operationId: memory_chains_list_retrieve
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/list/:
    get:
      operationId: memory_list_retrieve
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/memory/{memory_id}/feedback/:
    get:
      operationId: memory_memory_feedback_retrieve
      parameters:
      - in: path
        name: memory_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/memory/feedback/submit/:
    post:
      operationId: memory_memory_feedback_submit_create
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/recent/:
    get:
      operationId: memory_recent_retrieve
      description: Fetch the 10 most recent memories.
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/reflect/:
    post:
      operationId: memory_reflect_create
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/reflect-on-memories/:
    post:
      operationId: memory_reflect_on_memories_create
      description: Generate a reflection across multiple memories.
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/reflection/:
    post:
      operationId: memory_reflection_create
      description: Save a new ReflectionLog from a title, summary, and selected memories.
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/replace/{id}/:
    put:
      operationId: memory_replace_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/save/:
    post:
      operationId: memory_save_create
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/update-tags/{id}/:
    patch:
      operationId: memory_update_tags_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/memory/upload-voice/:
    post:
      operationId: memory_upload_voice_create
      tags:
      - memory
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/projects/:
    get:
      operationId: projects_projects_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - projects
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'
          description: ''
    post:
      operationId: projects_projects_create
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/projects/{id}/:
    get:
      operationId: projects_projects_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this project.
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    put:
      operationId: projects_projects_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this project.
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    patch:
      operationId: projects_projects_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this project.
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    delete:
      operationId: projects_projects_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this project.
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/projects/{project_pk}/stories/:
    get:
      operationId: projects_projects_stories_list
      description: Manages Story objects scoped to a parent Project (project_pk URL
        kwarg).
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: project_pk
        schema:
          type: integer
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStoryList'
          description: ''
    post:
      operationId: projects_projects_stories_create
      description: Manages Story objects scoped to a parent Project (project_pk URL
        kwarg).
      parameters:
      - in: path
        name: project_pk
        schema:
          type: integer
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StoryRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
          description: ''
  /api/projects/{project_pk}/stories/{id}/:
    get:
      operationId: projects_projects_stories_retrieve
      description: Manages Story objects scoped to a parent Project (project_pk URL
        kwarg).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: project_pk
        schema:
          type: integer
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
          description: ''
    put:
      operationId: projects_projects_stories_update
      description: Manages Story objects scoped to a parent Project (project_pk URL
        kwarg).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: project_pk
        schema:
          type: integer
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StoryRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
          description: ''
    patch:
      operationId: projects_projects_stories_partial_update
      description: Manages Story objects scoped to a parent Project (project_pk URL
        kwarg).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: project_pk
        schema:
          type: integer
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedStoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedStoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedStoryRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
          description: ''
    delete:
      operationId: projects_projects_stories_destroy
      description: Manages Story objects scoped to a parent Project (project_pk URL
        kwarg).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: project_pk
        schema:
          type: integer
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/prompts/:
    get:
      operationId: prompts_retrieve
      tags:
      - prompts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/prompts/{slug}/:
    get:
      operationId: prompts_retrieve_2
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - prompts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/prompts/analyze/:
    post:
      operationId: prompts_analyze_create
      tags:
      - prompts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/prompts/auto-reduce/:
    post:
      operationId: prompts_auto_reduce_create
      tags:
      - prompts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/prompts/create/:
    post:
      operationId: prompts_create_create
      tags:
      - prompts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/prompts/generate-from-idea/:
    post:
      operationId: prompts_generate_from_idea_create
      tags:
      - prompts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/prompts/mutate/:
    post:
      operationId: prompts_mutate_create
      tags:
      - prompts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/prompts/mutate-prompt/:
    post:
      operationId: prompts_mutate_prompt_create
      tags:
      - prompts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/prompts/preferences/:
    get:
      operationId: prompts_preferences_retrieve
      tags:
      - prompts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
  /api/prompts/preferences/update/:
    patch:
      operationId: prompts_preferences_update_partial_update
      tags:
      - prompts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
  /api/prompts/reduce/:
    post:
      operationId: prompts_reduce_create
      tags:
      - prompts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/prompts/reembed/:
    post:
      operationId: prompts_reembed_create
      tags:
      - prompts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/prompts/split/:
    post:
      operationId: prompts_split_create
      tags:
      - prompts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/prompts/tags/:
    get:
      operationId: prompts_tags_retrieve
      tags:
      - prompts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/stories/:
    get:
      operationId: stories_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - stories
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStoryList'
          description: ''
    post:
      operationId: stories_create
      description: Custom create to return serialized story after queuing.
      tags:
      - stories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StoryRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
          description: ''
  /api/stories/{id}/:
    get:
      operationId: stories_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this story.
        required: true
      tags:
      - stories
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryDetail'
          description: ''
    put:
      operationId: stories_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this story.
        required: true
      tags:
      - stories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StoryRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
          description: ''
    patch:
      operationId: stories_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this story.
        required: true
      tags:
      - stories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedStoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedStoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedStoryRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
          description: ''
    delete:
      operationId: stories_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this story.
        required: true
      tags:
      - stories
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/stories/{id}/audio/:
    post:
      operationId: stories_audio_create
      description: Trigger TTS generation for the full story text and attach audio
        to the Story.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this story.
        required: true
      tags:
      - stories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StoryRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
          description: ''
  /api/stories/{id}/chunk-tags/:
    get:
      operationId: stories_chunk_tags_retrieve
      description: List the tags inferred for each paragraph chunk of the story.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this story.
        required: true
      tags:
      - stories
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
          description: ''
  /api/stories/{id}/retry/:
    post:
      operationId: stories_retry_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this story.
        required: true
      tags:
      - stories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StoryRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
          description: ''
  /api/stories/{id}/tag-chunks/:
    post:
      operationId: stories_tag_chunks_create
      description: Trigger paragraph-level embedding + tag inference for the story.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this story.
        required: true
      tags:
      - stories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StoryRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
          description: ''
  /api/stories/{id}/tags/:
    get:
      operationId: stories_tags_retrieve
      description: Aggregate all chunk-level inferred tags for the story and return
        top 5 by frequency.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this story.
        required: true
      tags:
      - stories
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
          description: ''
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      security:
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/token/verify/:
    post:
      operationId: token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
        required: true
      security:
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          description: No response body
  /api/tts/stories/:
    get:
      operationId: tts_stories_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - tts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStoryAudioList'
          description: ''
    post:
      operationId: tts_stories_create
      description: Custom create to return job info instead of the full StoryAudio
        right away.
      tags:
      - tts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryAudioRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StoryAudioRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StoryAudioRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryAudio'
          description: ''
  /api/tts/stories/{id}/:
    get:
      operationId: tts_stories_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this story audio.
        required: true
      tags:
      - tts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryAudio'
          description: ''
    put:
      operationId: tts_stories_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this story audio.
        required: true
      tags:
      - tts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryAudioRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StoryAudioRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StoryAudioRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryAudio'
          description: ''
    patch:
      operationId: tts_stories_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this story audio.
        required: true
      tags:
      - tts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedStoryAudioRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedStoryAudioRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedStoryAudioRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryAudio'
          description: ''
    delete:
      operationId: tts_stories_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this story audio.
        required: true
      tags:
      - tts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/tts/stories/{id}/retry/:
    post:
      operationId: tts_stories_retry_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this story audio.
        required: true
      tags:
      - tts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryAudioRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StoryAudioRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StoryAudioRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryAudio'
          description: ''
  /api/tts/voices/list/:
    get:
      operationId: tts_voices_list_retrieve
      description: Returns available ElevenLabs voices with name, id, and labels.
      tags:
      - tts
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          description: No response body
  /api/videos/:
    get:
      operationId: videos_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - videos
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVideoList'
          description: ''
    post:
      operationId: videos_create
      tags:
      - videos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VideoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VideoRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: ''
  /api/videos/{id}/:
    get:
      operationId: videos_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this video.
        required: true
      tags:
      - videos
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: ''
    put:
      operationId: videos_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this video.
        required: true
      tags:
      - videos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VideoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VideoRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: ''
    patch:
      operationId: videos_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this video.
        required: true
      tags:
      - videos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVideoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVideoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVideoRequest'
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: ''
    delete:
      operationId: videos_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this video.
        required: true
      tags:
      - videos
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '204':
          description: No response body
  /api/videos/{id}/retry/:
    post:
      operationId: videos_retry_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this video.
        required: true
      tags:
      - videos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VideoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VideoRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: ''
  /api/videos/batch-generate/:
    post:
      operationId: videos_batch_generate_create
      description: Batch generate videos for each paragraph in a story.
      tags:
      - videos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VideoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VideoRequest'
        required: true
      security:
      - jwtAuth: []
      - Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: ''
components:
  schemas:
    BlankEnum:
      enum:
      - ''
    CharacterProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
          nullable: true
        personality_traits: {}
        backstory:
          type: string
          nullable: true
        is_public:
          type: boolean
        is_featured:
          type: boolean
        project:
          type: string
          format: uuid
          nullable: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/CharacterTag'
          readOnly: true
        styles:
          type: array
          items:
            $ref: '#/components/schemas/CharacterStyle'
          readOnly: true
        character_styles:
          type: array
          items:
            $ref: '#/components/schemas/PromptHelper'
          readOnly: true
        reference_images:
          type: array
          items:
            $ref: '#/components/schemas/CharacterReferenceImage'
          readOnly: true
        scene_images:
          type: string
          readOnly: true
        image_url:
          type: string
          readOnly: true
        created_by:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        training_status:
          type: string
          readOnly: true
      required:
      - character_styles
      - created_at
      - id
      - image_url
      - name
      - reference_images
      - scene_images
      - slug
      - styles
      - tags
      - training_status
    CharacterProfileRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          nullable: true
        personality_traits: {}
        backstory:
          type: string
          nullable: true
        is_public:
          type: boolean
        is_featured:
          type: boolean
        project:
          type: string
          format: uuid
          nullable: true
        created_by:
          type: integer
          nullable: true
        character_style_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
      required:
      - character_style_ids
      - name
    CharacterReferenceImage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        character_slug:
          type: string
          readOnly: true
        image:
          type: string
          format: uri
        caption:
          type: string
          nullable: true
          maxLength: 255
        alt_text:
          type: string
          nullable: true
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagImage'
          readOnly: true
        style:
          allOf:
          - $ref: '#/components/schemas/PromptHelper'
          readOnly: true
        is_primary:
          type: boolean
      required:
      - character_slug
      - created_at
      - id
      - image
      - style
      - tags
    CharacterReferenceImageRequest:
      type: object
      properties:
        character:
          type: integer
          writeOnly: true
        image:
          type: string
          format: binary
        caption:
          type: string
          nullable: true
          maxLength: 255
        alt_text:
          type: string
          nullable: true
          maxLength: 255
        style_id:
          type: integer
          writeOnly: true
          nullable: true
        is_primary:
          type: boolean
      required:
      - character
      - image
    CharacterStyle:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        style_name:
          type: string
          maxLength: 100
        prompt:
          type: string
        negative_prompt:
          type: string
          nullable: true
        image_reference:
          type: string
          format: uri
        prompt_helper:
          allOf:
          - $ref: '#/components/schemas/PromptHelper'
          readOnly: true
      required:
      - id
      - image_reference
      - prompt
      - prompt_helper
      - style_name
    CharacterStyleRequest:
      type: object
      properties:
        style_name:
          type: string
          minLength: 1
          maxLength: 100
        prompt:
          type: string
          minLength: 1
        negative_prompt:
          type: string
          nullable: true
        image_reference:
          type: string
          format: binary
      required:
      - image_reference
      - prompt
      - style_name
    CharacterTag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
      required:
      - id
      - name
    CharacterTagRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
      required:
      - name
    GenerationTypeEnum:
      enum:
      - initial
      - inpaint
      - variation
      - remix
      - scene
      type: string
      description: |-
        * `initial` - Initial
        * `inpaint` - Inpaint
        * `variation` - Variation
        * `remix` - Remix
        * `scene` - Scene
    Image:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        style:
          type: string
          readOnly: true
        output_urls:
          type: string
          readOnly: true
        story_title:
          type: string
          readOnly: true
        project_title:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        model_used:
          type: string
        engine_used:
          type: string
          readOnly: true
        status:
          type: string
          readOnly: true
        url:
          type: string
          readOnly: true
        model_backend:
          allOf:
          - $ref: '#/components/schemas/ModelBackend942Enum'
          default: stability
          description: |-
            Generation backend to use

            * `stability` - Stability.ai (SDXL)
            * `replicate-standard` - Replicate - Standard Image
            * `replicate-kling` - Replicate - Kling v1.6 Video
            * `openai` - OpenAI
        prediction_id:
          type: string
          readOnly: true
        user:
          type: string
          readOnly: true
        character:
          type: integer
        caption:
          type: string
        alt_text:
          type: string
        title:
          type: string
          nullable: true
          maxLength: 200
        description:
          type: string
          nullable: true
        prompt:
          type: string
        negative_prompt:
          type: string
          nullable: true
        applied_prompt_suffix:
          type: string
          nullable: true
        aspect_ratio:
          type: string
          nullable: true
          maxLength: 10
        width:
          type: integer
          maximum: 2147483647
          minimum: 0
        height:
          type: integer
          maximum: 2147483647
          minimum: 0
        num_outputs:
          type: integer
          maximum: 2147483647
          minimum: 0
        steps:
          type: integer
          maximum: 2147483647
          minimum: 0
        guidance_scale:
          type: number
          format: double
        seed:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        scheduler:
          type: string
          maxLength: 50
        is_favorite:
          type: boolean
        file_path:
          type: string
          nullable: true
        output_url:
          type: string
          format: uri
          nullable: true
          maxLength: 500
        error_message:
          type: string
          nullable: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        is_public:
          type: boolean
        generation_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenerationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        was_upscaled:
          type: boolean
        was_edited:
          type: boolean
        order:
          type: integer
          maximum: 2147483647
          minimum: 0
        project:
          type: string
          format: uuid
          nullable: true
        project_image:
          type: integer
          nullable: true
        story:
          type: integer
          nullable: true
        tags:
          type: array
          items:
            type: integer
      required:
      - created_at
      - engine_used
      - id
      - order
      - output_urls
      - prediction_id
      - project_title
      - prompt
      - status
      - story_title
      - style
      - updated_at
      - url
      - user
    ImageDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        style:
          type: string
          readOnly: true
        output_urls:
          type: string
          readOnly: true
        story_title:
          type: string
          readOnly: true
        project_title:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        model_used:
          type: string
        engine_used:
          type: string
          readOnly: true
        status:
          type: string
          readOnly: true
        url:
          type: string
          readOnly: true
        model_backend:
          allOf:
          - $ref: '#/components/schemas/ModelBackend942Enum'
          default: stability
          description: |-
            Generation backend to use

            * `stability` - Stability.ai (SDXL)
            * `replicate-standard` - Replicate - Standard Image
            * `replicate-kling` - Replicate - Kling v1.6 Video
            * `openai` - OpenAI
        prediction_id:
          type: string
          readOnly: true
        user:
          type: string
          readOnly: true
        character:
          type: integer
        caption:
          type: string
        alt_text:
          type: string
        upscaled_versions:
          type: string
          readOnly: true
        title:
          type: string
          nullable: true
          maxLength: 200
        description:
          type: string
          nullable: true
        prompt:
          type: string
        negative_prompt:
          type: string
          nullable: true
        applied_prompt_suffix:
          type: string
          nullable: true
        aspect_ratio:
          type: string
          nullable: true
          maxLength: 10
        width:
          type: integer
          maximum: 2147483647
          minimum: 0
        height:
          type: integer
          maximum: 2147483647
          minimum: 0
        num_outputs:
          type: integer
          maximum: 2147483647
          minimum: 0
        steps:
          type: integer
          maximum: 2147483647
          minimum: 0
        guidance_scale:
          type: number
          format: double
        seed:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        scheduler:
          type: string
          maxLength: 50
        is_favorite:
          type: boolean
        file_path:
          type: string
          nullable: true
        output_url:
          type: string
          format: uri
          nullable: true
          maxLength: 500
        error_message:
          type: string
          nullable: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        is_public:
          type: boolean
        generation_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenerationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        was_upscaled:
          type: boolean
        was_edited:
          type: boolean
        order:
          type: integer
          maximum: 2147483647
          minimum: 0
        project:
          type: string
          format: uuid
          nullable: true
        project_image:
          type: integer
          nullable: true
        story:
          type: integer
          nullable: true
        tags:
          type: array
          items:
            type: integer
      required:
      - created_at
      - engine_used
      - id
      - order
      - output_urls
      - prediction_id
      - project_title
      - prompt
      - status
      - story_title
      - style
      - updated_at
      - upscaled_versions
      - url
      - user
    ImageRequest:
      type: object
      properties:
        style_id:
          type: integer
          writeOnly: true
        model_used:
          type: string
        model_backend:
          allOf:
          - $ref: '#/components/schemas/ModelBackend942Enum'
          default: stability
          description: |-
            Generation backend to use

            * `stability` - Stability.ai (SDXL)
            * `replicate-standard` - Replicate - Standard Image
            * `replicate-kling` - Replicate - Kling v1.6 Video
            * `openai` - OpenAI
        character:
          type: integer
        caption:
          type: string
        alt_text:
          type: string
        title:
          type: string
          nullable: true
          maxLength: 200
        description:
          type: string
          nullable: true
        prompt:
          type: string
          minLength: 1
        negative_prompt:
          type: string
          nullable: true
        applied_prompt_suffix:
          type: string
          nullable: true
        aspect_ratio:
          type: string
          nullable: true
          maxLength: 10
        width:
          type: integer
          maximum: 2147483647
          minimum: 0
        height:
          type: integer
          maximum: 2147483647
          minimum: 0
        num_outputs:
          type: integer
          maximum: 2147483647
          minimum: 0
        steps:
          type: integer
          maximum: 2147483647
          minimum: 0
        guidance_scale:
          type: number
          format: double
        seed:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        scheduler:
          type: string
          minLength: 1
          maxLength: 50
        is_favorite:
          type: boolean
        file_path:
          type: string
          nullable: true
        output_url:
          type: string
          format: uri
          nullable: true
          maxLength: 500
        error_message:
          type: string
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        is_public:
          type: boolean
        generation_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenerationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        was_upscaled:
          type: boolean
        was_edited:
          type: boolean
        order:
          type: integer
          maximum: 2147483647
          minimum: 0
        project:
          type: string
          format: uuid
          nullable: true
        project_image:
          type: integer
          nullable: true
        story:
          type: integer
          nullable: true
        tags:
          type: array
          items:
            type: integer
      required:
      - order
      - prompt
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1
      required:
      - password
    ModelBackend942Enum:
      enum:
      - stability
      - replicate-standard
      - replicate-kling
      - openai
      type: string
      description: |-
        * `stability` - Stability.ai (SDXL)
        * `replicate-standard` - Replicate - Standard Image
        * `replicate-kling` - Replicate - Kling v1.6 Video
        * `openai` - OpenAI
    NarratorVoiceEnum:
      enum:
      - Echo
      - Nova
      type: string
      description: |-
        * `Echo` - Echo
        * `Nova` - Nova
    NullEnum:
      enum:
      - null
    PaginatedCharacterProfileList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CharacterProfile'
    PaginatedCharacterReferenceImageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CharacterReferenceImage'
    PaginatedCharacterStyleList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CharacterStyle'
    PaginatedImageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    PaginatedProjectImageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProjectImage'
    PaginatedProjectList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    PaginatedPromptHelperList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PromptHelper'
    PaginatedStoryAudioList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/StoryAudio'
    PaginatedStoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Story'
    PaginatedTagImageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TagImage'
    PaginatedThemeFavoriteList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ThemeFavorite'
    PaginatedThemeHelperList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ThemeHelper'
    PaginatedVideoList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Video'
    PasswordChangeRequest:
      type: object
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordResetConfirmRequest:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PasswordResetRequest:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    PatchedCharacterProfileRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          nullable: true
        personality_traits: {}
        backstory:
          type: string
          nullable: true
        is_public:
          type: boolean
        is_featured:
          type: boolean
        project:
          type: string
          format: uuid
          nullable: true
        created_by:
          type: integer
          nullable: true
        character_style_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
    PatchedCharacterReferenceImageRequest:
      type: object
      properties:
        character:
          type: integer
          writeOnly: true
        image:
          type: string
          format: binary
        caption:
          type: string
          nullable: true
          maxLength: 255
        alt_text:
          type: string
          nullable: true
          maxLength: 255
        style_id:
          type: integer
          writeOnly: true
          nullable: true
        is_primary:
          type: boolean
    PatchedCharacterStyleRequest:
      type: object
      properties:
        style_name:
          type: string
          minLength: 1
          maxLength: 100
        prompt:
          type: string
          minLength: 1
        negative_prompt:
          type: string
          nullable: true
        image_reference:
          type: string
          format: binary
    PatchedImageRequest:
      type: object
      properties:
        style_id:
          type: integer
          writeOnly: true
        model_used:
          type: string
        model_backend:
          allOf:
          - $ref: '#/components/schemas/ModelBackend942Enum'
          default: stability
          description: |-
            Generation backend to use

            * `stability` - Stability.ai (SDXL)
            * `replicate-standard` - Replicate - Standard Image
            * `replicate-kling` - Replicate - Kling v1.6 Video
            * `openai` - OpenAI
        character:
          type: integer
        caption:
          type: string
        alt_text:
          type: string
        title:
          type: string
          nullable: true
          maxLength: 200
        description:
          type: string
          nullable: true
        prompt:
          type: string
          minLength: 1
        negative_prompt:
          type: string
          nullable: true
        applied_prompt_suffix:
          type: string
          nullable: true
        aspect_ratio:
          type: string
          nullable: true
          maxLength: 10
        width:
          type: integer
          maximum: 2147483647
          minimum: 0
        height:
          type: integer
          maximum: 2147483647
          minimum: 0
        num_outputs:
          type: integer
          maximum: 2147483647
          minimum: 0
        steps:
          type: integer
          maximum: 2147483647
          minimum: 0
        guidance_scale:
          type: number
          format: double
        seed:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        scheduler:
          type: string
          minLength: 1
          maxLength: 50
        is_favorite:
          type: boolean
        file_path:
          type: string
          nullable: true
        output_url:
          type: string
          format: uri
          nullable: true
          maxLength: 500
        error_message:
          type: string
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        is_public:
          type: boolean
        generation_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenerationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        was_upscaled:
          type: boolean
        was_edited:
          type: boolean
        order:
          type: integer
          maximum: 2147483647
          minimum: 0
        project:
          type: string
          format: uuid
          nullable: true
        project_image:
          type: integer
          nullable: true
        story:
          type: integer
          nullable: true
        tags:
          type: array
          items:
            type: integer
    PatchedProjectRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        theme:
          type: string
          maxLength: 100
        image_style:
          type: string
          maxLength: 100
        narrator_voice:
          oneOf:
          - $ref: '#/components/schemas/NarratorVoiceEnum'
          - $ref: '#/components/schemas/BlankEnum'
        is_public:
          type: boolean
        project_type:
          $ref: '#/components/schemas/ProjectTypeEnum'
        goal:
          type: string
          nullable: true
        initial_prompt:
          type: string
          nullable: true
        status:
          type: string
          minLength: 1
          maxLength: 50
        user:
          type: integer
        assistant:
          type: string
          format: uuid
          nullable: true
        created_from_memory:
          type: string
          format: uuid
          nullable: true
        participants:
          type: array
          items:
            type: integer
    PatchedPromptHelperRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        prompt:
          type: string
          minLength: 1
          description: The suffix prompt to be applied to base prompts.
        negative_prompt:
          type: string
          nullable: true
          description: Negative prompt to help avoid undesired elements in generation.
        is_builtin:
          type: boolean
        voice_style:
          type: string
          nullable: true
          description: Preferred TTS voice style for this prompt, e.g., 'echo', 'nova',
            'custom-fantasy'
          maxLength: 50
    PatchedStoryAudioRequest:
      type: object
      properties:
        prompt:
          type: string
          minLength: 1
        voice_style:
          type: string
          nullable: true
          maxLength: 100
        provider:
          $ref: '#/components/schemas/ProviderEnum'
        model_backend:
          allOf:
          - $ref: '#/components/schemas/ModelBackend942Enum'
          default: stability
          description: |-
            Audio generation backend to use

            * `stability` - Stability.ai (SDXL)
            * `replicate-standard` - Replicate - Standard Image
            * `replicate-kling` - Replicate - Kling v1.6 Video
            * `openai` - OpenAI
    PatchedStoryRequest:
      type: object
      properties:
        style_id:
          type: integer
          writeOnly: true
          nullable: true
        character_id:
          type: integer
          writeOnly: true
          nullable: true
        characters:
          type: array
          items:
            type: integer
        status:
          $ref: '#/components/schemas/Status1cdEnum'
        title:
          type: string
          maxLength: 200
        prompt:
          type: string
          minLength: 1
        summary:
          type: string
          nullable: true
        cover_image_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        theme:
          type: string
          nullable: true
          maxLength: 100
        tags:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 50
        published_at:
          type: string
          format: date-time
          nullable: true
        is_reward:
          type: boolean
        reward_reason:
          type: string
          nullable: true
          maxLength: 255
    PatchedThemeFavoriteRequest:
      type: object
      properties:
        theme_id:
          type: integer
    PatchedThemeHelperRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          description: Brief description of the theme world.
        prompt:
          type: string
          minLength: 1
          description: Prompt suffix to apply for this theme.
        negative_prompt:
          type: string
          description: Optional negative prompt to avoid unwanted generations.
        category:
          type: string
          description: Optional grouping category (e.g. Environment, Fantasy, Historical)
          maxLength: 100
        tags:
          type: array
          items:
            type: string
            minLength: 1
        recommended_style_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        is_builtin:
          type: boolean
        is_public:
          type: boolean
        is_featured:
          type: boolean
        parent:
          type: integer
          nullable: true
          description: Original theme this was forked from
    PatchedUserDetailsRequest:
      type: object
      description: User model w/o password
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    PatchedVideoRequest:
      type: object
      properties:
        prompt:
          type: string
          minLength: 1
        theme:
          type: string
          nullable: true
          maxLength: 100
        tags:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 50
        input_image:
          type: string
          format: binary
          nullable: true
        model_backend:
          allOf:
          - $ref: '#/components/schemas/VideoModelBackendEnum'
          description: |-
            Select which backend model to use for generation

            * `stability` - Stability.ai (SDXL)
            * `replicate-standard` - Replicate - Standard Image
            * `replicate-kling` - Replicate - Kling v1.6 Video
            * `openai` - OpenAI (DALL-E or Whisper)
        paragraph_index:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
          description: If this video is for a specific paragraph in the story
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        stories:
          type: array
          items:
            $ref: '#/components/schemas/Story'
          readOnly: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
          readOnly: true
        tts_audios:
          type: string
          readOnly: true
        title:
          type: string
          maxLength: 255
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        theme:
          type: string
          maxLength: 100
        image_style:
          type: string
          maxLength: 100
        narrator_voice:
          oneOf:
          - $ref: '#/components/schemas/NarratorVoiceEnum'
          - $ref: '#/components/schemas/BlankEnum'
        is_public:
          type: boolean
        project_type:
          $ref: '#/components/schemas/ProjectTypeEnum'
        goal:
          type: string
          nullable: true
        initial_prompt:
          type: string
          nullable: true
        status:
          type: string
          maxLength: 50
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
        assistant:
          type: string
          format: uuid
          nullable: true
        created_from_memory:
          type: string
          format: uuid
          nullable: true
        participants:
          type: array
          items:
            type: integer
      required:
      - created_at
      - id
      - images
      - stories
      - title
      - tts_audios
      - updated_at
      - user
    ProjectImage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
          nullable: true
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        is_published:
          type: boolean
        is_featured:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          nullable: true
      required:
      - created_at
      - id
      - name
      - slug
    ProjectRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        theme:
          type: string
          maxLength: 100
        image_style:
          type: string
          maxLength: 100
        narrator_voice:
          oneOf:
          - $ref: '#/components/schemas/NarratorVoiceEnum'
          - $ref: '#/components/schemas/BlankEnum'
        is_public:
          type: boolean
        project_type:
          $ref: '#/components/schemas/ProjectTypeEnum'
        goal:
          type: string
          nullable: true
        initial_prompt:
          type: string
          nullable: true
        status:
          type: string
          minLength: 1
          maxLength: 50
        user:
          type: integer
        assistant:
          type: string
          format: uuid
          nullable: true
        created_from_memory:
          type: string
          format: uuid
          nullable: true
        participants:
          type: array
          items:
            type: integer
      required:
      - title
      - user
    ProjectTypeEnum:
      enum:
      - general
      - assistant
      - storybook
      - gardening
      - farming
      type: string
      description: |-
        * `general` - General
        * `assistant` - Assistant
        * `storybook` - Storybook
        * `gardening` - Gardening
        * `farming` - Farming
    PromptHelper:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
          nullable: true
        prompt:
          type: string
          description: The suffix prompt to be applied to base prompts.
        negative_prompt:
          type: string
          nullable: true
          description: Negative prompt to help avoid undesired elements in generation.
      required:
      - id
      - name
    PromptHelperRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          nullable: true
        prompt:
          type: string
          minLength: 1
          description: The suffix prompt to be applied to base prompts.
        negative_prompt:
          type: string
          nullable: true
          description: Negative prompt to help avoid undesired elements in generation.
      required:
      - name
    ProviderEnum:
      enum:
      - openai
      - elevenlabs
      type: string
      description: |-
        * `openai` - OpenAI
        * `elevenlabs` - ElevenLabs
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 150
        email:
          type: string
          format: email
          minLength: 1
        password1:
          type: string
          writeOnly: true
          minLength: 1
        password2:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password1
      - password2
      - username
    ResendEmailVerificationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    Status1cdEnum:
      enum:
      - queued
      - generating
      - completed
      - failed
      type: string
      description: |-
        * `queued` - Queued
        * `generating` - Generating
        * `completed` - Completed
        * `failed` - Failed
    Status640Enum:
      enum:
      - queued
      - processing
      - completed
      - failed
      type: string
      description: |-
        * `queued` - Queued
        * `processing` - Processing
        * `completed` - Completed
        * `failed` - Failed
    Story:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
          readOnly: true
        image:
          allOf:
          - $ref: '#/components/schemas/Image'
          readOnly: true
        tts:
          allOf:
          - $ref: '#/components/schemas/StoryAudio'
          readOnly: true
        tts_preview_url:
          type: string
          readOnly: true
        image_url:
          type: string
          readOnly: true
        image_caption:
          type: string
          readOnly: true
        image_alt_text:
          type: string
          readOnly: true
        style:
          allOf:
          - $ref: '#/components/schemas/PromptHelper'
          readOnly: true
        story_images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
          readOnly: true
        character:
          allOf:
          - $ref: '#/components/schemas/CharacterProfile'
          readOnly: true
        characters:
          type: array
          items:
            type: integer
        status:
          $ref: '#/components/schemas/Status1cdEnum'
        title:
          type: string
          maxLength: 200
        prompt:
          type: string
        summary:
          type: string
          nullable: true
        generated_text:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        cover_image_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        theme:
          type: string
          nullable: true
          maxLength: 100
        tags:
          type: array
          items:
            type: string
            maxLength: 50
        published_at:
          type: string
          format: date-time
          nullable: true
        is_reward:
          type: boolean
        reward_reason:
          type: string
          nullable: true
          maxLength: 255
        updated_at:
          type: string
          format: date-time
          readOnly: true
        project:
          type: string
          format: uuid
          readOnly: true
          nullable: true
      required:
      - character
      - created_at
      - generated_text
      - id
      - image
      - image_alt_text
      - image_caption
      - image_url
      - project
      - prompt
      - story_images
      - style
      - tts
      - tts_preview_url
      - updated_at
      - user
    StoryAudio:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        prompt:
          type: string
        voice_style:
          type: string
          nullable: true
          maxLength: 100
        provider:
          $ref: '#/components/schemas/ProviderEnum'
        model_backend:
          allOf:
          - $ref: '#/components/schemas/ModelBackend942Enum'
          default: stability
          description: |-
            Audio generation backend to use

            * `stability` - Stability.ai (SDXL)
            * `replicate-standard` - Replicate - Standard Image
            * `replicate-kling` - Replicate - Kling v1.6 Video
            * `openai` - OpenAI
        status:
          allOf:
          - $ref: '#/components/schemas/Status640Enum'
          readOnly: true
        audio_url:
          type: string
          readOnly: true
        base64_audio:
          type: string
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          readOnly: true
          nullable: true
      required:
      - audio_url
      - base64_audio
      - created_at
      - id
      - prompt
      - status
      - user
    StoryAudioRequest:
      type: object
      properties:
        prompt:
          type: string
          minLength: 1
        voice_style:
          type: string
          nullable: true
          maxLength: 100
        provider:
          $ref: '#/components/schemas/ProviderEnum'
        model_backend:
          allOf:
          - $ref: '#/components/schemas/ModelBackend942Enum'
          default: stability
          description: |-
            Audio generation backend to use

            * `stability` - Stability.ai (SDXL)
            * `replicate-standard` - Replicate - Standard Image
            * `replicate-kling` - Replicate - Kling v1.6 Video
            * `openai` - OpenAI
      required:
      - prompt
    StoryDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        theme:
          type: string
          nullable: true
          maxLength: 100
        generated_text:
          type: string
        image:
          allOf:
          - $ref: '#/components/schemas/Image'
          readOnly: true
        image_url:
          type: string
          readOnly: true
        tts:
          allOf:
          - $ref: '#/components/schemas/StoryAudio'
          readOnly: true
        tts_preview_url:
          type: string
          readOnly: true
        style:
          allOf:
          - $ref: '#/components/schemas/PromptHelper'
          readOnly: true
        status:
          $ref: '#/components/schemas/Status1cdEnum'
        project:
          type: string
          format: uuid
          nullable: true
        character:
          allOf:
          - $ref: '#/components/schemas/CharacterProfile'
          readOnly: true
        characters:
          type: array
          items:
            type: integer
        story_images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        user:
          type: string
          readOnly: true
      required:
      - character
      - generated_text
      - id
      - image
      - image_url
      - story_images
      - style
      - tts
      - tts_preview_url
      - user
    StoryRequest:
      type: object
      properties:
        style_id:
          type: integer
          writeOnly: true
          nullable: true
        character_id:
          type: integer
          writeOnly: true
          nullable: true
        characters:
          type: array
          items:
            type: integer
        status:
          $ref: '#/components/schemas/Status1cdEnum'
        title:
          type: string
          maxLength: 200
        prompt:
          type: string
          minLength: 1
        summary:
          type: string
          nullable: true
        cover_image_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        theme:
          type: string
          nullable: true
          maxLength: 100
        tags:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 50
        published_at:
          type: string
          format: date-time
          nullable: true
        is_reward:
          type: boolean
        reward_reason:
          type: string
          nullable: true
          maxLength: 255
      required:
      - prompt
    TagImage:
      type: object
      description: Serializer for semantic tags on reference images
      properties:
        name:
          type: string
          maxLength: 50
      required:
      - name
    TagImageRequest:
      type: object
      description: Serializer for semantic tags on reference images
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
      required:
      - name
    ThemeFavorite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user_id:
          type: integer
          readOnly: true
        theme_id:
          type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - theme_id
      - user_id
    ThemeFavoriteRequest:
      type: object
      properties:
        theme_id:
          type: integer
      required:
      - theme_id
    ThemeHelper:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
          description: Brief description of the theme world.
        prompt:
          type: string
          description: Prompt suffix to apply for this theme.
        negative_prompt:
          type: string
          description: Optional negative prompt to avoid unwanted generations.
        category:
          type: string
          description: Optional grouping category (e.g. Environment, Fantasy, Historical)
          maxLength: 100
        tags:
          type: array
          items:
            type: string
        recommended_styles:
          type: array
          items:
            $ref: '#/components/schemas/PromptHelper'
          readOnly: true
        preview_image_url:
          type: string
          readOnly: true
        is_builtin:
          type: boolean
        is_public:
          type: boolean
        is_featured:
          type: boolean
        created_by_username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          readOnly: true
        parent:
          type: integer
          nullable: true
          description: Original theme this was forked from
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_favorited:
          type: string
          readOnly: true
        favorites_count:
          type: string
          readOnly: true
      required:
      - created_at
      - created_by_username
      - favorites_count
      - id
      - is_favorited
      - name
      - preview_image_url
      - prompt
      - recommended_styles
      - tags
      - updated_at
    ThemeHelperRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          description: Brief description of the theme world.
        prompt:
          type: string
          minLength: 1
          description: Prompt suffix to apply for this theme.
        negative_prompt:
          type: string
          description: Optional negative prompt to avoid unwanted generations.
        category:
          type: string
          description: Optional grouping category (e.g. Environment, Fantasy, Historical)
          maxLength: 100
        tags:
          type: array
          items:
            type: string
            minLength: 1
        recommended_style_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        is_builtin:
          type: boolean
        is_public:
          type: boolean
        is_featured:
          type: boolean
        parent:
          type: integer
          nullable: true
          description: Original theme this was forked from
      required:
      - name
      - prompt
      - tags
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    TokenVerifyRequest:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - token
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - pk
      - username
    UserDetailsRequest:
      type: object
      description: User model w/o password
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - username
    VerifyEmailRequest:
      type: object
      properties:
        key:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - key
    Video:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        prompt:
          type: string
        theme:
          type: string
          nullable: true
          maxLength: 100
        tags:
          type: array
          items:
            type: string
            maxLength: 50
        status:
          allOf:
          - $ref: '#/components/schemas/Status640Enum'
          readOnly: true
        input_image:
          type: string
          format: uri
          nullable: true
        video_url:
          type: string
          readOnly: true
        video_file:
          type: string
          format: uri
          readOnly: true
          nullable: true
        provider:
          type: string
          readOnly: true
        model_backend:
          allOf:
          - $ref: '#/components/schemas/VideoModelBackendEnum'
          description: |-
            Select which backend model to use for generation

            * `stability` - Stability.ai (SDXL)
            * `replicate-standard` - Replicate - Standard Image
            * `replicate-kling` - Replicate - Kling v1.6 Video
            * `openai` - OpenAI (DALL-E or Whisper)
        prediction_id:
          type: string
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        completed_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        paragraph_index:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
          description: If this video is for a specific paragraph in the story
      required:
      - completed_at
      - created_at
      - id
      - prediction_id
      - prompt
      - provider
      - status
      - updated_at
      - user
      - video_file
      - video_url
    VideoModelBackendEnum:
      enum:
      - stability
      - replicate-standard
      - replicate-kling
      - openai
      type: string
      description: |-
        * `stability` - Stability.ai (SDXL)
        * `replicate-standard` - Replicate - Standard Image
        * `replicate-kling` - Replicate - Kling v1.6 Video
        * `openai` - OpenAI (DALL-E or Whisper)
    VideoRequest:
      type: object
      properties:
        prompt:
          type: string
          minLength: 1
        theme:
          type: string
          nullable: true
          maxLength: 100
        tags:
          type: array
          items:
            type: string
            minLength: 1
            maxLength: 50
        input_image:
          type: string
          format: binary
          nullable: true
        model_backend:
          allOf:
          - $ref: '#/components/schemas/VideoModelBackendEnum'
          description: |-
            Select which backend model to use for generation

            * `stability` - Stability.ai (SDXL)
            * `replicate-standard` - Replicate - Standard Image
            * `replicate-kling` - Replicate - Kling v1.6 Video
            * `openai` - OpenAI (DALL-E or Whisper)
        paragraph_index:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
          description: If this video is for a specific paragraph in the story
      required:
      - prompt
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
- url: /api
  description: Default API base
tags:
- name: auth
  description: Authentication endpoints
- name: assistants
  description: Assistant logic and memory tools
- name: projects
  description: Assistant projects, tasks, and milestones
- name: thoughts
  description: Thought logs, generation, and reflection
- name: memories
  description: Memory entries, chains, and training
- name: prompts
  description: Prompt creation, mutation, and testing
- name: images
  description: Image generation and theme utilities
- name: characters
  description: Character creation, previewing, and styling
- name: embeddings
  description: Text embedding and similarity search
- name: videos
  description: Video generation tools and outputs
- name: tts
  description: Text-to-speech voice generation
